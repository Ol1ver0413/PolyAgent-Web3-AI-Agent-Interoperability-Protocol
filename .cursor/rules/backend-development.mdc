---
description: 
globs: 
alwaysApply: true
---
# 后端开发规范

## Flask 应用结构

### 主服务器文件
**[app.py](mdc:app.py)** 是核心 Flask 应用，包含：

#### 核心组件初始化
```python
# AI 模型创建
model = ModelFactory.create(
    model_platform=ModelPlatformType.OPENAI,
    model_type=ModelType.GPT_4_1,
    url=config.OPENAI_API_URL,
    api_key=config.OPENAI_API_KEY,
)

# Agent 实例化
market_monitor = MarketMonitorAgent(model)
agent_manager = AgentManager()
```

#### API 端点规范
- `/` - 健康检查端点
- `/config` - 配置信息获取
- `/agents/status` - Agent 状态检查
- `/market-monitor` - 加密货币市场分析
- `/market-trade` - 跨境支付桥接

#### 流式响应实现
所有 AI Agent 响应都使用流式传输：
```python
def stream_agent_response(agent_instance, user_message):
    # 重定向 stdout 到队列
    # 执行 Agent.step()
    # 返回流式数据
```

## AI Agent 开发规范

### AgentManager 类结构
**[AgentCore/Society/market_trade.py](mdc:AgentCore/Society/market_trade.py)**：

#### 必需组件
- `iotex_agent` - 区块链操作 Agent
- `story_agent` - 内容生成 Agent  
- `run_alipay_query()` - 异步支付宝 API 调用

#### 系统消息模板
每个 Agent 都需要详细的系统消息，包含：
- 功能描述
- 参数说明
- 默认值配置
- 调用规则

### MCP 工具包集成
**[AgentCore/Mcp/alipay_server.json](mdc:AgentCore/Mcp/alipay_server.json)** - MCP 配置：
- 设置适当的超时时间（30秒）
- 使用本地安装的依赖
- 确保 npm 包正确安装

## 错误处理规范

### 常见问题处理
1. **重复路由定义** - 检查是否有多个 `@app.route` 装饰器
2. **端口占用** - 使用 `netstat -ano | findstr :5000` 检查
3. **MCP 超时** - 调整 `clientRequestTimeout` 配置
4. **API 密钥** - 确保 `config.OPENAI_API_KEY` 正确设置

### 日志记录
使用标准的 Python logging 模块，在关键操作点添加日志：
```python
print("🧠 正在初始化AI模型...")
print("✅ AI模型初始化成功。")
```

## 开发工作流

### 本地开发
1. 确保所有依赖安装：`pip install -r requirements.txt`
2. 配置环境变量和 API 密钥
3. 启动服务器：`python app.py`
4. 使用调试模式检查端点状态

### 测试规范
- 创建独立的测试脚本验证 API 端点
- 使用 `requests` 库进行端点测试
- 检查状态码和响应内容
- 验证流式响应功能

