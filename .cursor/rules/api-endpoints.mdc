# API 端点规范

## 核心 API 端点

### 健康检查和状态
- **GET /** - 基础健康检查
  ```json
  Response: {"status": "ok", "message": "PolyAgent server is running."}
  ```

- **GET /config** - 获取服务器配置
  ```json
  Response: {
    "openai_api_configured": boolean,
    "iotex_rpc_url": string
  }
  ```

- **GET /agents/status** - 检查 Agent 运行状态
  ```json
  Response: {
    "market_monitor": "ok" | "error",
    "agent_manager": "ok" | "error"
  }
  ```

## AI Agent 端点

### 市场监控 Agent
- **POST /market-monitor**
  ```json
  Request: {"message": "用户查询消息"}
  Response: 流式文本响应
  Content-Type: text/plain
  ```
  - 功能：加密货币价格查询、市场分析、新闻获取
  - 使用 MarketMonitorAgent 处理请求

### 跨境支付桥接 Agent  
- **POST /market-trade**
  ```json
  Request: {"message": "用户操作消息"}
  Response: 流式文本响应
  Content-Type: text/plain
  ```
  - 功能：支付宝→稳定币转换、区块链操作、服务交付
  - 支持消息路由：支付、查询、转账、故事、总结

## 分步支付流程端点

### 步骤1：创建支付订单
- **POST /payment/create**
  ```json
  Request: {}
  Response: 流式文本响应
  ```
  - 调用支付宝沙盒 API 创建订单
  - 返回支付链接和订单信息

### 步骤2：查询支付状态
- **POST /payment/query**
  ```json
  Request: {}
  Response: 流式文本响应
  ```
  - 查询订单支付状态
  - 显示流程进度

### 步骤3：查询ERC20授权额度
- **POST /payment/allowance**
  ```json
  Request: {}
  Response: 流式文本响应
  ```
  - 查询代币授权额度
  - 使用 IoTeX Agent 处理

### 步骤4：授权ERC20代币
- **POST /payment/approve**
  ```json
  Request: {}
  Response: 流式文本响应
  ```
  - 执行代币授权操作
  - 授权200个代币给指定地址

### 步骤5：执行稳定币转账
- **POST /payment/transfer**
  ```json
  Request: {}
  Response: 流式文本响应
  ```
  - 执行5个代币转账
  - 返回交易详情和确认信息

### 步骤6：提供故事服务
- **POST /payment/story**
  ```json
  Request: {"story_demand": "故事需求描述"}
  Response: 流式文本响应
  ```
  - 生成定制故事内容
  - 显示订单完成摘要

## 演示和测试端点

### 获取演示流程
- **GET /demo/payment-flow**
  ```json
  Response: {
    "title": "🌐 跨境支付桥接演示流程",
    "description": "演示流程描述",
    "scenario": {...},
    "steps": [...]
  }
  ```

### 快速演示执行
- **POST /demo/quick-test**
  ```json
  Request: {}
  Response: 流式文本响应
  ```
  - 自动执行完整的6步支付流程
  - 用于快速演示和测试

## 流式响应规范

### 实现机制
所有 AI Agent 端点都使用流式响应：
```python
def stream_agent_response():
    # 使用队列捕获 stdout
    # 执行 Agent 操作
    # 逐块返回响应数据
    yield f"{chunk}\n"
```

### 前端处理
```typescript
const reader = response.body.getReader();
const decoder = new TextDecoder();
while (true) {
    const { done, value } = await reader.read();
    if (done) break;
    const chunk = decoder.decode(value, { stream: !done });
    // 更新 UI
}
```

## 错误处理规范

### 标准错误响应
```json
{
  "error": "错误描述信息"
}
HTTP Status: 400/500
```

### 常见错误码
- **400** - 请求参数缺失或无效
- **404** - 端点不存在（通常是路由配置问题）
- **500** - Agent 初始化失败或内部错误

## 集成测试建议

### 端点测试脚本
```python
import requests

def test_endpoints():
    base_url = "http://localhost:5000"
    
    # 测试健康检查
    response = requests.get(f"{base_url}/")
    assert response.status_code == 200
    
    # 测试 AI Agent
    response = requests.post(f"{base_url}/market-trade", 
                           json={"message": "测试消息"})
    assert response.status_code == 200
```

### 流式响应测试
验证流式数据的连续性和完整性，确保前端能正确解析和显示内容。
